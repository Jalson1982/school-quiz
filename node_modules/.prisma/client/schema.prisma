generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GameStatus {
  ACTIVE
  COMPLETED
  FAILED
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  email        String        @unique
  password     String
  firstName    String
  lastName     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  gameSessions GameSession[]
  leaderboard  Leaderboard?
}

model Question {
  id            String                @id @default(uuid())
  text          String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctOption String
  responseTime  Int
  createdAt     DateTime              @default(now())
  gameSessions  GameSessionQuestion[]
  userAnswers   UserAnswer[]

  @@index([createdAt])
}

model GameSession {
  id              String                @id @default(uuid())
  user            User                  @relation(fields: [userId], references: [id])
  userId          String
  score           Int                   @default(0)
  currentQuestion Int                   @default(0)
  totalQuestions  Int
  status          GameStatus            @default(ACTIVE)
  questions       GameSessionQuestion[]
  userAnswers     UserAnswer[]
  createdAt       DateTime              @default(now())
  completedAt     DateTime?

  @@index([userId])
}

model GameSessionQuestion {
  id            String      @id @default(uuid())
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id])
  gameSessionId String
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    String
  order         Int
  createdAt     DateTime    @default(now())

  @@unique([gameSessionId, order])
  @@index([gameSessionId])
}

model UserAnswer {
  id             String      @id @default(uuid())
  gameSession    GameSession @relation(fields: [gameSessionId], references: [id])
  gameSessionId  String
  question       Question    @relation(fields: [questionId], references: [id])
  questionId     String
  selectedOption String
  isCorrect      Boolean
  answeredAt     DateTime    @default(now())
  questionOrder  Int

  @@index([gameSessionId])
  @@index([questionId])
}

model Leaderboard {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  highScore Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([highScore])
}
